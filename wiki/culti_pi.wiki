#summary Culti Pi

= Introduction =

Cette section de l'aide décrit le fonctionnement du Culti Pi.

Ce module permet de connecter la Cultibox est ses accessoires.

Deux composants sont présents dans la Culti Pi :
 * Le logiciel Cultibox
 * Le logiciel Culti Pi

== Architecture Culti Pi ==

Le logiciel Culti Pi est composé de :
 * Un serveur Culti Pi. Il s'assure du bon démarrage de tous les composants, il gère les échange entre les composants et enregistre les logs.
 * Différents composants. On retrouve parmi les composants : Un serveur de calcul de 'état des prises, un module de pilotage des prises, un module d'acquisition des données des capteurs...

Trois espaces sur la carte sont présents pour le bon fonctionnement du logiciel :
 * L'espace ou est installé Culti Pi : /opt/cultipi
 * L'espace de configuration de Culti Pi : /etc/cultipi
 * L'espace ou sont les logs : /var/log/cultipi
 * L'espace ou sont présents les logiciel Cultibox et Cultinet : /var/www


Fonctionnement général :
Sur une action de l'utilisateur, le logiciel Cultibox génère une configuration pour Culti Pi. Cette configuration regroupe l'ensemble des fichiers permettant au serveur Culti Pi de bien fonctionner.
Le logiciel Cultibox arrête ensuite le serveur Culti Pi pui le redémarre.
Le serveur Culti Pi est responsable du lancement de chaque module. Il gère les repères et permet à chaque module de lire ou écrire les repères.
Les modules peuvent lire les repères pour effectuer des actions ou écrire les repères.

=== Espace de configuration ===

Cet espace permet de stocker les configurations qui peuvent être démarrées par le serveur. Chaque configuration est représentée par un dossier.

A la racine de cet espace on trouve le fichier "conf.xml" qui définit qu'elle doit être la configuration à lancer. Ce fichier est de la forme :

{{{
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<confs>
    <!-- Example : http://wfr.tcl.tk/1151 -->
    <conf dir="00_defaultConf" />
</confs>
}}}

Pour changer le dossier de configuration qui sera chargé, il faut modifier le paramètre dir de l'argument conf. 

Chaque configuration est un dossier dans lequel on retrouve la configuration des différents modules. Pour chaque module, un dossier avec ces fichiers de configurations à l'intérieur.

=== Serveur Culti Pi ===

Au démarrage du serveur Culti Pi,il charge la liste des repères de sa configuration. Chaque repère représente une entrée ou une sortie.
Ensuite le serveur démarre tous les composants définit dans le fichier de configuration.

Pour démarrer le serveur CultiPi :
tclsh cultiPi.tcl conf_dir
Avec :
 * conf_dir : Chemin vers le dossier racine des configurations

Au démarrage, il charge le fichier "conf.xml" présent dans le dossier conf_dir. Ce fichier de XML définit quelle configuration démarrer. 

Exemple de fichier conf.xml :

{{{
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<confs>
    <!-- Example : http://wfr.tcl.tk/1151 -->
    <conf dir="00_defaultConf" />
</confs>
}}}

Ensuite, le logiciel CultiPi  charge le fichier XML présent dans le dossier cultiPi de sa configuration. Ce fichier définit l'ensemble des modules qu'il doit démarrer. Il s’appelle start.xml .

Le fichier de configuration (généré par le logiciel Cultibox, au format XML) prend la forme suivante :

{{{
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<starts>
    <item name="serverLog" waitAfterUS="1000" port="6003" pathexe="tclsh" path="./serverLog/serveurLog.tcl" xmlconf="./serverLog/conf.xml" />
    <item name="serverAcqSensor" waitAfterUS="100" port="6006" pathexe="tclsh" path="./serverAcqSensor/serverAcqSensor.tcl" xmlconf="./serverAcqSensor/conf.xml" />
    <item name="serverPlugUpdate" waitAfterUS="100" port="6004" pathexe="tclsh" path="./serverPlugUpdate/serverPlugUpdate.tcl" xmlconf="./serverPlugUpdate/conf.xml" />
    <item name="serverHisto" waitAfterUS="100" port="6009" pathexe="tclsh" path="./serverHisto/serverHisto.tcl" xmlconf="./serverHisto/conf.xml" />
</starts>
}}}

Pour chaque module qu'il démarre, il crée automatiquement les repères suivants (Non implémenté) : 
 * etat : État de la connexion (écrit par le serveur)
 * run : Mise en route du module (écrit par le serveur)
 * etat_run : État de la mise en route du module (écrit par le module)

Pour arrêter le logiciel, il suffit d’exécuter avec tclsh le script cultiPistop.tcl.

== Les modules ==

=== Introduction ===

Tous les modules doivent pourvoir être appelé de la façon suivante :

<module> <numéro port> <fichier de conf XML> <numéro de port du server log>

=== Communication ===

Tous les modules implémentent un serveur basé sur des sockets. Les numéros de port de chaque module :

 * cultiPI : 6000
 * serverLog : 6003
 * serverAcqSensor : 6006
 * serverPlugUpdate : 6004
 * serverHisto : 6009

Pour communiquer avec un module, on ouvre une connexion vers son socket et on lui envoi des trames. Chaque trame respecte le format suivant : 

[FROM] [INDEX] [COMMANDE] [Reste de la trame]

Avec : 

 * FROM : Adresse de l'émetteur de la requête
 * INDEX : Un index unique de la part de l'émetteur pour identifier les messages
 * COMMANDE : Le nom de la commande à appliquer
 * Reste de la trame : toutes les informations nécessaire pour l’exécution de la commande

Chaque module implémente à minima les commandes suivantes :

 * stop : pour arrêter le module.
 * pid : le module retourne le pid du module
 * getRepere [VARIABLE] [PARAMETRE] : Retourne l'élément PARAMETRE du vecteur VARIABLE


=== Module de Logs (serverLog) ===

A chaque démarrage du serveur CultiPi, le module de log est lancé. Il ouvre un socket et accepte les connections des autres modules.
Lorsqu'un module lui envoi un log à écrire, il l'écrit dans un fichier nommé logXX.txt ou XX correspond au jour du mois.
A chaque changement de jour les traces déjà présentes dans le fichier sont supprimées.

Chaque module peut logguer des traces en passant par le serveur. Chaque trace est composée de 4 éléments :
 * L'heure de la trace
 * Le nom du module qui trace
 * Le type de trace : error_critic error warning info debug
 * La trace en elle même

L'utilisateur peut définir le niveau de trace inscrite dans le fichier log.

=== Module serverHisto ===

Il a pour but d'enregistrer en base de donnée certains repères.

=== Module serverAcqSensor ===

Ce module réalise l'acquisition de donnée. Au chargement, il demande au serveur tous les repères de type mesure et ayant le protocole I2C.
Pour chaque repère, il lance l'acquisition du repère en utilisant comme adresse de module I2C le paramètre "Connexion" et comme adresse de lecture le paramètre "adresse pour acquisition".
Pour réaliser l'acquisition, il utilise le module "Module I2C".

Il pilote ensuite le repère en inscrivant les données suivantes :
 * Qualité : Valide s'il récupère une donnée , défaut communication sinon
 * Valeur : avec la valeur lue * "Coef A" + "Coef B"
 * Source : Mesure
 * Heure source : l'heure de réponse du module I2C

=== Module serverPlugUpdate ===

Ce module pilote les prises sans fils. Au chargement, il demande au serveur tous les repères de type pilote et ayant le protocole I2C et la connexion "433MHz".
Pour réaliser le pilotage, il utilise le module "Module I2C".



== Installation ==

Matériel nécessaire :
 - Un Raspberry Pi
 - Une carte d'extension Culti Pi


== Commandes/Informations utiles ==

Voici quelques commandes utiles:
 
 * Le logiciel Cultipi est accompagné d'un cron exécuté toute les minutes vérifiant le lancement du logiciel. Si ce n'est pas le cas, ce cron se charge de relancer le logiciel, il est présent dans */etc/crontab*. Il est possible de désactiver le lancement automatique par cron en éditant le fichier */etc/default/culticron* et en remplaçant la ligne:

{{{
CULTICRON_ACTIV="yes"
}}}

par:

{{{
CULTICRON_ACTIV="no"
}}}

 * La commande pour vérifier que le logiciel Cultipi est la suivante:

{{{
/etc/init.d/cultipi status
}}}

Il est aussi possible de voir en détail les processus lancés par la commande:

{{{
ps ax|grep tclsh
}}}

 * Afin de remettre la configuration réseau par défaut, il utiliser la commande suivante:

{{{
cp /etc/network/interfaces.BASE /etc/network/interfaces
}}}


 * Un cron s'occupe aussi de la mise à jour des packages. Celui-ci est lançé une fois par jour. Pour mettre à jour manuellement les paquets Cultipi, Cultibox et Cultinet, il faut utiliser la commande suivante:

{{{
/etc/cron.daily/cultipi
}}}