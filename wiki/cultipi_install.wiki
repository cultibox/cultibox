#summary One-sentence summary of this page.

= Introduction =

La procédure suivante permet d'installer manuellement un système cultipi sur un Raspbery Pi fraîchement acquis.


= Installation du système de base =

 * Télécharger l'image Raspbian de base qui servira de système à la Cultipi: 

{{{
http://files2.linuxsystems.it/raspbian_wheezy_20140726.img.7z
}}}

 * Décompresser l'image: 

{{{
7za x raspbian_wheezy_20130923.img.7z
}}}

 * Brancher la carte SD qui va recevoir le système, démonter les partitions déjà présentes puis lancer la commande:

{{{
dd bs=4M if=raspbian_wheezy_20130923.img of=/dev/sdX
}}}

*Remarque:* /dev/sdX correspond au device de la carte SD qui va recevoir le système. Il faut préciser le device dans son intégralité et non pas une partition, par exemple: /dev/sdb et non pas /dev/sdb2

 * Une fois la copie terminée, il est possible de redimensionner les partitions pour utiliser tous l'espace de la carte SD. Dans ce cas la il faudra déplacer la partition swap après toutes les autres partitions. Il est possible d'utiliser gparted pour réaliser cela.

 * Réintroduire la carte SD dans le Raspberry et brancher l'alimentation.

 * La connexion sur le Raspberry se fait grâce à un écran/clavier branché ou alors par SSH. Par défaut si vous branchez un câble Ethernet le Raspberry obtiendra une adresse IP depuis votre Box. Il vous est alors possible de vous connecter par SSH ou directement depuis la console:

{{{
Login: pi
Password: raspberry
}}}

ou

{{{
Login: root
Password: raspberry
}}}

= Personnalisation de l'image =

 * Mise à jour du système:

{{{
apt-get update
apt-get upgrade
}}}

 * Reconfiguration des locales et du timezone:

{{{	
dpkg-reconfigure locales 
dpkg-reconfigure tzdata
}}}

 * Installation des packages utiles et utilitaires:

{{{
apt-get install sudo localpurge vim libnss-mdns avahi-daemon
}}}

 * Ajout de l'utilisateur Cultipi, suppréssion de l'utilisateur pi:

{{{
adduser cultipi
deluser pi
}}}

 * Configuration du nom de l'hôte:

{{{
cat << EOF > /etc/hostname
cultipi
EOF
}}}

{{{
vi /etc/hosts
}}}
 
Modifier la ligne commençant par 127.0.0.1 pour qu'elle ressemble à ceci:

{{{
127.0.0.1 localhost cultipi
}}}

 * Remplacement du système de logs par syslogd qui consomme moins de ressources:

{{{
apt-get -y remove --purge rsyslog
apt-get -y install inetutils-syslogd
}}}

	
= Optimisation du Raspberry =
 * Gestion de la mémoire:

{{{
vi /boot/config.txt
}}}

Ajouter *gpu_mem=16* pour donner le maximum de mémoire au CPU au détriment du GPU.
Décomenter *arm_freq=800* pour overclocker le Raspberry (http://elinux.org/RPiconfig)

 * Suppression des consoles inutilisées:

{{{
sed -i '/[2-6]:23:respawn:\/sbin\/getty 38400 tty[2-6]/s%^%#%g' /etc/inittab
}}}

 * Désactivation de l'ipv6:

{{{
cat << EOF > /etc/sysctl.d/disable_ipv6.conf 
net.ipv6.conf.all.disable_ipv6=1
EOF
}}}

{{{
echo "blacklist ipv6" >> /etc/modprobe.d/fbdev-blacklist.conf
}}}

{{{
sed -i '/::/s%^%#%g' /etc/hosts
}}}

 * Optimisation de l’ordonnanceur:

{{{				
sed -i 's/deadline/noop/g' /boot/cmdline.txt
}}}

 * Redémarrage du système:

{{{
reboot
}}}		
		
 * Personnalisation du système des logs:

{{{
service inetutils-syslogd stop
}}}

{{{
for file in /var/log/*.log /var/log/mail.* /var/log/debug /var/log/syslog; do [ -f "$file" ] && rm -f "$file"; done
}}}

{{{
for dir in fsck news; do [ -d "/var/log/$dir" ] && rm -rf "/var/log/$dir"; done
}}}

{{{
echo -e "*.*;mail.none;cron.none\t -/var/log/messages\ncron.*\t -/var/log/cron\nmail.*\t -/var/log/mail" > /etc/syslog.conf
}}}

{{{
mkdir -p /etc/logrotate.d
}}}

{{{
echo -e "/var/log/cron\n/var/log/mail\n/var/log/messages {\n\trotate 4\n\tweekly\n\tmissingok\n\tnotifempty\n\tcompress\n\tsharedscripts\n\tpostrotate\n\t/etc/init.d/inetutils-syslogd reload >/dev/null\n\tendscript\n}" > /etc/logrotate.d/inetutils-syslogd
}}}

{{{
service inetutils-syslogd start
}}}

*Remarque:* optimisations issues de : 
https://extremeshok.com/1081/raspberry-pi-raspbian-tuning-optimising-optimizing-for-reduced-memory-usage/


= Installation des services utiles aux logiciels =

== Installation et configuration de lighttpd et PHP ==
 * Installation de lighttpd et php:

{{{
apt-get -y install lighttpd
apt-get -y install php5-common php5-cgi php5 php-apc
rm /var/www/index.lighttpd.html
lighttpd-enable-mod fastcgi-php
}}}

 * Configuration de PHP:

Editer le fichier */etc/php5/cgi/php.ini* et modifier les directives suivantes:

{{{
max_execution_time = 240
memory_limit = 256M
}}}

 * Relancement du serveur :

{{{
/etc/init.d/lighttpd force-reload 
}}}

*Remarque:* Vous pouvez utiliser la fonction *phpinfo()* afin de vérifier les composants activés dans PHP

 * Création des certificats pour https:

{{{
mkdir -p /etc/lighttpd/ssl
openssl req -new -x509 -keyout cultipi.pem -out server.pem -days 365 -nodes
chmod -R 600 /etc/lighttpd/ssl
}}}

 * Configuration du fichier lighttpd.conf

{{{
vi /etc/lighttpd/lighttpd.conf
}}}

Le fichier doit ressembler à cela:

{{{
server.modules = (
	"mod_access",
	"mod_alias",
	"mod_compress",
 	"mod_redirect",
#   "mod_rewrite",
)

server.document-root        = "/var/www"
server.upload-dirs          = ( "/var/cache/lighttpd/uploads" )
server.errorlog             = "/var/log/lighttpd/error.log"
server.pid-file             = "/var/run/lighttpd.pid"
server.username             = "www-data"
server.groupname            = "www-data"
server.port                 = 80


index-file.names            = ( "index.php", "index.html", "index.lighttpd.html" )
url.access-deny             = ( "~", ".inc" )
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )

compress.cache-dir          = "/var/cache/lighttpd/compress/"
compress.filetype           = ( "application/javascript", "text/css", "text/html", "text/plain" )

# default listening port for IPv6 falls back to the IPv4 port
include_shell "/usr/share/lighttpd/use-ipv6.pl " + server.port
include_shell "/usr/share/lighttpd/create-mime.assign.pl"
include_shell "/usr/share/lighttpd/include-conf-enabled.pl"

$HTTP["scheme"] == "http" {
    # capture vhost name with regex conditiona -> %0 in redirect pattern
    # must be the most inner block to the redirect rule
    $HTTP["remoteip"] != "172.16.0.0/24" {    
        $HTTP["host"] =~ ".*" {
            url.redirect = (".*" => "https://%0$0")
        }
    } 

    $HTTP["remoteip"] == "172.16.0.0/24" {
            url.redirect = ("^/$" => "cultinet" )
    }
}

$SERVER["socket"] == ":443" {
        ssl.engine = "enable"
        ssl.pemfile = "/etc/lighttpd/ssl/cultipi.pem"
}
}}}


Puis relancez le serveur:

{{{
/etc/init.d/lighttpd force-reload
}}}


== Installation et configuration de mysql ==

 * Installation de mysql:

{{{
apt-get install mysql-server php5-mysql
}}}


*Remarque:* configurer le serveur avec l'utilisateur *root* et appliqué le mot de passe *cultibox*
 * Configuration de mysql:

Éditer le fichier */etc/mysql/my.cnf* est modifié le port utilisé:

{{{
port        = 3891
}}}

 * Redémarrage du serveur:

{{
/etc/init.d/mysql force-reload
}}}



= Configuration du réseau du Cultipi =

 * Configuration des interfaces:

Editer le fichier */etc/network/interfaces* afin que le fichier soit identique à cela:

{{{
# interfaces(5) file used by ifup(8) and ifdown(8)
#IFACE LO
auto lo
iface lo inet loopback

#IFACE ETH0
allow-hotplug eth0
auto eth0
iface eth0 inet dhcp

#IFACE WLAN0
allow-hotplug wlan0
auto wlan0
iface wlan0 inet static
address 172.16.0.100
netmask 255.255.255.0
wireless-channel 4
wireless-essid cultipi_network
wireless-mode ad-hoc
}}}


*Remarque:* les commentaires sont importants, le logiciel de configuration du réseau Cultinet les utilise pour déterminer les blocs liés aux différentes interfaces. Ce fichier de configuration déclare un réseau adHoc sur lequel il sera possible de se connecter afin de configurer son réseau wifi.


 * Installation et configuration d'un serveur DHCP pour le mode adHoc

{{{
apt-get install udhcpd
}}}

{{{
vi /etc/udhcpd.conf
}}}



* Sauvegarde de l'image:
	sudo dd bs=4M if=/dev/mmcblk0 | gzip > ~/cultipi-`date +%d%m%y`.dd.gz   ==> après umount




apt-get install udhcpd

vi /etc/default/udhcpd


	
# Comment the following line to enable
DHCPD_ENABLED="yes"

# Options to pass to busybox' udhcpd.
#
# -S    Log to syslog
# -f    run in foreground

DHCPD_OPTS="-S"
~                    






vi /etc/udhcpd.conf

# The start and end of the IP lease block

start       172.16.0.102  #default: 192.168.0.20
end         172.16.0.254  #default: 192.168.0.254


# The interface that udhcpd will use

interface   wlan0       #default: eth0


# The maximim number of leases (includes addressesd reserved
# by OFFER's, DECLINE's, and ARP conficts

#max_leases 254     #default: 254


# If remaining is true (default), udhcpd will store the time
# remaining for each lease in the udhcpd leases file. This is
# for embedded systems that cannot keep time between reboots.
# If you set remaining to no, the absolute time that the lease
# expires at will be stored in the dhcpd.leases file.

remaining   yes     #default: yes

#Examles
#opt    dns 192.168.10.2 192.168.10.10
option  subnet  255.255.255.0
opt router  172.16.0.100
#opt    wins    192.168.10.10
#option dns 129.219.13.81   # appened to above DNS servers for a total of 3
option  domain  local
option  lease   864000      # 10 days of s



ifconfig wlan0 up

* Clean:
	sudo apt-get autoremove
	sudo apt-get clean





vérifier cache-control lighttpd 




rpi-update


root@cultipi:~# cat /etc/sudoers

cultipi ALL=(ALL:ALL) ALL
www-data ALL = (root) NOPASSWD: /sbin/ifconfig
www-data ALL = (root) NOPASSWD: /sbin/iwlist
www-data ALL = (root) NOPASSWD: /sbin/ifup
www-data ALL = (root) NOPASSWD: /bin/mv 
www-data ALL = (root) NOPASSWD: /bin/chmod
www-data ALL = (root) NOPASSWD: /bin/cp
www-data ALL = (root) NOPASSWD: /etc/init.d/networking


i2c-dev


compilation i2c:

make
make install du dépôt

visudo /etc/sudoers ==> cultipi ALL=(ALL:ALL) ALL	